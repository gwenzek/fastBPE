<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">py-spy</text><text id="details" x="10" y="405.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="405.00"> </text><svg id="frames" x="10" width="1180"><g><title>apply (test_cpp.py:10) (49 samples, 1.68%)</title><rect x="0.1027%" y="68" width="1.6769%" height="15" fill="rgb(227,0,7)"/><text x="0.3527%" y="78.50"></text></g><g><title>__Pyx_PyObject_CallNoArg (string.to_py:55) (31 samples, 1.06%)</title><rect x="4.4832%" y="100" width="1.0609%" height="15" fill="rgb(217,0,24)"/><text x="4.7332%" y="110.50"></text></g><g><title>apply (fastBPE.pyx:22) (81 samples, 2.77%)</title><rect x="4.0383%" y="84" width="2.7721%" height="15" fill="rgb(221,193,54)"/><text x="4.2883%" y="94.50">ap..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (33 samples, 1.13%)</title><rect x="7.7344%" y="196" width="1.1294%" height="15" fill="rgb(248,212,6)"/><text x="7.9844%" y="206.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (33 samples, 1.13%)</title><rect x="7.7344%" y="212" width="1.1294%" height="15" fill="rgb(208,68,35)"/><text x="7.9844%" y="222.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (33 samples, 1.13%)</title><rect x="7.7344%" y="228" width="1.1294%" height="15" fill="rgb(232,128,0)"/><text x="7.9844%" y="238.50"></text></g><g><title>fastBPE::split (fastBPE.hpp:418) (50 samples, 1.71%)</title><rect x="7.7002%" y="180" width="1.7112%" height="15" fill="rgb(207,160,47)"/><text x="7.9502%" y="190.50"></text></g><g><title>fastBPE::BPEApplyer::apply (fastBPE.hpp:657) (70 samples, 2.40%)</title><rect x="7.0500%" y="164" width="2.3956%" height="15" fill="rgb(228,23,34)"/><text x="7.3000%" y="174.50">fa..</text></g><g><title>fastBPE::BPEApplyer::apply (fastBPE.hpp:667) (100 samples, 3.42%)</title><rect x="11.1910%" y="164" width="3.4223%" height="15" fill="rgb(218,30,26)"/><text x="11.4410%" y="174.50">fas..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (stl_vector.h:948) (85 samples, 2.91%)</title><rect x="11.7043%" y="180" width="2.9090%" height="15" fill="rgb(220,122,19)"/><text x="11.9543%" y="190.50">st..</text></g><g><title>fastBPE::BPEApplyer::apply (fastBPE.hpp:672) (37 samples, 1.27%)</title><rect x="14.6133%" y="164" width="1.2663%" height="15" fill="rgb(250,228,42)"/><text x="14.8633%" y="174.50"></text></g><g><title>fastBPE::BPEApplyer::apply (fastBPE.hpp:673) (31 samples, 1.06%)</title><rect x="15.8795%" y="164" width="1.0609%" height="15" fill="rgb(240,193,28)"/><text x="16.1295%" y="174.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.tcc:225) (31 samples, 1.06%)</title><rect x="18.8569%" y="292" width="1.0609%" height="15" fill="rgb(216,20,37)"/><text x="19.1069%" y="302.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (basic_string.h:387) (30 samples, 1.03%)</title><rect x="18.8912%" y="308" width="1.0267%" height="15" fill="rgb(206,188,39)"/><text x="19.1412%" y="318.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (basic_string.h:439) (70 samples, 2.40%)</title><rect x="18.2067%" y="260" width="2.3956%" height="15" fill="rgb(217,207,13)"/><text x="18.4567%" y="270.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_Alloc_hider::_Alloc_hider (basic_string.h:149) (70 samples, 2.40%)</title><rect x="18.2067%" y="276" width="2.3956%" height="15" fill="rgb(231,73,38)"/><text x="18.4567%" y="286.50">st..</text></g><g><title>std::make_pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;&gt; (stl_pair.h:529) (81 samples, 2.77%)</title><rect x="18.2067%" y="228" width="2.7721%" height="15" fill="rgb(225,20,46)"/><text x="18.4567%" y="238.50">st..</text></g><g><title>std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp;, true&gt; (stl_pair.h:342) (81 samples, 2.77%)</title><rect x="18.2067%" y="244" width="2.7721%" height="15" fill="rgb(210,31,41)"/><text x="18.4567%" y="254.50">st..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:538) (98 samples, 3.35%)</title><rect x="18.1725%" y="212" width="3.3539%" height="15" fill="rgb(221,200,47)"/><text x="18.4225%" y="222.50">fas..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_construct&lt;char const*&gt; (basic_string.tcc:225) (36 samples, 1.23%)</title><rect x="22.6557%" y="324" width="1.2320%" height="15" fill="rgb(226,26,5)"/><text x="22.9057%" y="334.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_S_copy_chars (basic_string.h:387) (36 samples, 1.23%)</title><rect x="22.6557%" y="340" width="1.2320%" height="15" fill="rgb(249,33,26)"/><text x="22.9057%" y="350.50"></text></g><g><title>fastBPE::pair_hash::operator()&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (fastBPE.hpp:159) (85 samples, 2.91%)</title><rect x="21.5264%" y="276" width="2.9090%" height="15" fill="rgb(235,183,28)"/><text x="21.7764%" y="286.50">fa..</text></g><g><title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (basic_string.h:6603) (85 samples, 2.91%)</title><rect x="21.5264%" y="292" width="2.9090%" height="15" fill="rgb(221,5,38)"/><text x="21.7764%" y="302.50">st..</text></g><g><title>std::_Hash_impl::hash (functional_hash.h:192) (85 samples, 2.91%)</title><rect x="21.5264%" y="308" width="2.9090%" height="15" fill="rgb(247,18,42)"/><text x="21.7764%" y="318.50">st..</text></g><g><title>fastBPE::pair_hash::operator()&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (fastBPE.hpp:160) (55 samples, 1.88%)</title><rect x="24.4353%" y="276" width="1.8823%" height="15" fill="rgb(241,131,45)"/><text x="24.6853%" y="286.50">f..</text></g><g><title>std::hash&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator() (basic_string.h:6603) (55 samples, 1.88%)</title><rect x="24.4353%" y="292" width="1.8823%" height="15" fill="rgb(249,31,29)"/><text x="24.6853%" y="302.50">s..</text></g><g><title>std::_Hash_impl::hash (functional_hash.h:192) (55 samples, 1.88%)</title><rect x="24.4353%" y="308" width="1.8823%" height="15" fill="rgb(225,111,53)"/><text x="24.6853%" y="318.50">s..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (hashtable.h:1423) (158 samples, 5.41%)</title><rect x="21.5264%" y="244" width="5.4073%" height="15" fill="rgb(238,160,17)"/><text x="21.7764%" y="254.50">std::_H..</text></g><g><title>std::__detail::_Hash_code_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::__detail::_Select1st, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_hash_code (hashtable_policy.h:1368) (158 samples, 5.41%)</title><rect x="21.5264%" y="260" width="5.4073%" height="15" fill="rgb(214,148,48)"/><text x="21.7764%" y="270.50">std::__..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (hashtable.h:1424) (205 samples, 7.02%)</title><rect x="26.9336%" y="244" width="7.0157%" height="15" fill="rgb(232,36,49)"/><text x="27.1836%" y="254.50">std::_Has..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (hashtable.h:631) (138 samples, 4.72%)</title><rect x="29.2266%" y="260" width="4.7228%" height="15" fill="rgb(209,103,24)"/><text x="29.4766%" y="270.50">std::_..</text></g><g><title>std::__detail::_Hash_code_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::__detail::_Select1st, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (hashtable_policy.h:1373) (138 samples, 4.72%)</title><rect x="29.2266%" y="276" width="4.7228%" height="15" fill="rgb(229,88,8)"/><text x="29.4766%" y="286.50">std::_..</text></g><g><title>std::__detail::_Mod_range_hashing::operator() (hashtable_policy.h:448) (138 samples, 4.72%)</title><rect x="29.2266%" y="292" width="4.7228%" height="15" fill="rgb(213,181,19)"/><text x="29.4766%" y="302.50">std::_..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (hashtable.h:1544) (116 samples, 3.97%)</title><rect x="33.9493%" y="276" width="3.9699%" height="15" fill="rgb(254,191,54)"/><text x="34.1993%" y="286.50">std:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::data (basic_string.h:2293) (329 samples, 11.26%)</title><rect x="39.8357%" y="372" width="11.2594%" height="15" fill="rgb(241,83,37)"/><text x="40.0857%" y="382.50">std::__cxx11::bas..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (hashtable.h:1551) (431 samples, 14.75%)</title><rect x="37.9192%" y="276" width="14.7502%" height="15" fill="rgb(233,36,39)"/><text x="38.1692%" y="286.50">std::_Hashtable&lt;std::pa..</text></g><g><title>std::__detail::_Hashtable_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_equals (hashtable_policy.h:1815) (431 samples, 14.75%)</title><rect x="37.9192%" y="292" width="14.7502%" height="15" fill="rgb(226,3,54)"/><text x="38.1692%" y="302.50">std::__detail::_Hashtab..</text></g><g><title>std::__detail::_Equal_helper&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, unsigned long, true&gt;::_S_equals (hashtable_policy.h:1433) (431 samples, 14.75%)</title><rect x="37.9192%" y="308" width="14.7502%" height="15" fill="rgb(245,192,40)"/><text x="38.1692%" y="318.50">std::__detail::_Equal_h..</text></g><g><title>std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator() (stl_function.h:356) (423 samples, 14.48%)</title><rect x="38.1930%" y="324" width="14.4764%" height="15" fill="rgb(238,167,29)"/><text x="38.4430%" y="334.50">std::equal_to&lt;std::pai..</text></g><g><title>std::operator==&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (stl_pair.h:449) (423 samples, 14.48%)</title><rect x="38.1930%" y="340" width="14.4764%" height="15" fill="rgb(232,182,51)"/><text x="38.4430%" y="350.50">std::operator==&lt;std::_..</text></g><g><title>std::operator==&lt;char&gt; (basic_string.h:6020) (421 samples, 14.41%)</title><rect x="38.2615%" y="356" width="14.4079%" height="15" fill="rgb(231,60,39)"/><text x="38.5115%" y="366.50">std::operator==&lt;char&gt; ..</text></g><g><title>std::char_traits&lt;char&gt;::compare (char_traits.h:310) (46 samples, 1.57%)</title><rect x="51.0951%" y="372" width="1.5743%" height="15" fill="rgb(208,69,12)"/><text x="51.3451%" y="382.50"></text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:539) (1,064 samples, 36.41%)</title><rect x="21.5264%" y="212" width="36.4134%" height="15" fill="rgb(235,93,37)"/><text x="21.7764%" y="222.50">fastBPE::process_bpe (fastBPE.hpp:539)</text></g><g><title>std::unordered_map&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, unsigned int, fastBPE::pair_hash, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt; &gt;::find (unordered_map.h:920) (1,064 samples, 36.41%)</title><rect x="21.5264%" y="228" width="36.4134%" height="15" fill="rgb(213,116,39)"/><text x="21.7764%" y="238.50">std::unordered_map&lt;std::pair&lt;std::__cxx11::basic_string&lt;cha..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::find (hashtable.h:1425) (701 samples, 23.99%)</title><rect x="33.9493%" y="244" width="23.9904%" height="15" fill="rgb(222,207,29)"/><text x="34.1993%" y="254.50">std::_Hashtable&lt;std::pair&lt;std::__cxx11..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_node (hashtable.h:642) (701 samples, 23.99%)</title><rect x="33.9493%" y="260" width="23.9904%" height="15" fill="rgb(206,96,30)"/><text x="34.1993%" y="270.50">std::_Hashtable&lt;std::pair&lt;std::__cxx11..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_find_before_node (hashtable.h:1554) (154 samples, 5.27%)</title><rect x="52.6694%" y="276" width="5.2704%" height="15" fill="rgb(218,138,4)"/><text x="52.9194%" y="286.50">std::_..</text></g><g><title>std::_Hashtable&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::allocator&lt;std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;true, false, true&gt; &gt;::_M_bucket_index (hashtable.h:627) (70 samples, 2.40%)</title><rect x="55.5441%" y="292" width="2.3956%" height="15" fill="rgb(250,191,14)"/><text x="55.7941%" y="302.50">st..</text></g><g><title>std::__detail::_Hash_code_base&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;, std::pair&lt;std::pair&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; const, unsigned int&gt;, std::__detail::_Select1st, fastBPE::pair_hash, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, true&gt;::_M_bucket_index (hashtable_policy.h:1379) (69 samples, 2.36%)</title><rect x="55.5784%" y="308" width="2.3614%" height="15" fill="rgb(239,60,40)"/><text x="55.8284%" y="318.50">st..</text></g><g><title>std::__detail::_Mod_range_hashing::operator() (hashtable_policy.h:448) (69 samples, 2.36%)</title><rect x="55.5784%" y="324" width="2.3614%" height="15" fill="rgb(206,27,48)"/><text x="55.8284%" y="334.50">st..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:552) (60 samples, 2.05%)</title><rect x="58.4873%" y="212" width="2.0534%" height="15" fill="rgb(225,35,8)"/><text x="58.7373%" y="222.50">f..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:555) (46 samples, 1.57%)</title><rect x="61.5332%" y="212" width="1.5743%" height="15" fill="rgb(250,213,24)"/><text x="61.7832%" y="222.50"></text></g><g><title>std::operator==&lt;char&gt; (basic_string.h:6020) (41 samples, 1.40%)</title><rect x="61.7043%" y="228" width="1.4031%" height="15" fill="rgb(247,123,22)"/><text x="61.9543%" y="238.50"></text></g><g><title>std::operator==&lt;char&gt; (basic_string.h:6020) (30 samples, 1.03%)</title><rect x="63.1075%" y="228" width="1.0267%" height="15" fill="rgb(231,138,38)"/><text x="63.3575%" y="238.50"></text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:556) (35 samples, 1.20%)</title><rect x="63.1075%" y="212" width="1.1978%" height="15" fill="rgb(231,145,46)"/><text x="63.3575%" y="222.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (vector.tcc:105) (70 samples, 2.40%)</title><rect x="64.5106%" y="276" width="2.3956%" height="15" fill="rgb(251,118,11)"/><text x="64.7606%" y="286.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (85 samples, 2.91%)</title><rect x="64.3053%" y="244" width="2.9090%" height="15" fill="rgb(217,147,25)"/><text x="64.5553%" y="254.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (85 samples, 2.91%)</title><rect x="64.3053%" y="260" width="2.9090%" height="15" fill="rgb(247,81,37)"/><text x="64.5553%" y="270.50">st..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (86 samples, 2.94%)</title><rect x="64.3053%" y="228" width="2.9432%" height="15" fill="rgb(209,12,38)"/><text x="64.5553%" y="238.50">st..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:557) (154 samples, 5.27%)</title><rect x="64.3053%" y="212" width="5.2704%" height="15" fill="rgb(227,1,9)"/><text x="64.5553%" y="222.50">fastBP..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (stl_vector.h:954) (68 samples, 2.33%)</title><rect x="67.2485%" y="228" width="2.3272%" height="15" fill="rgb(248,47,43)"/><text x="67.4985%" y="238.50">s..</text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (basic_string.h:5894) (36 samples, 1.23%)</title><rect x="68.3436%" y="244" width="1.2320%" height="15" fill="rgb(221,10,30)"/><text x="68.5936%" y="254.50"></text></g><g><title>operator new (new_op.cc:50) (64 samples, 2.19%)</title><rect x="72.4504%" y="308" width="2.1903%" height="15" fill="rgb(210,229,1)"/><text x="72.7004%" y="318.50">o..</text></g><g><title>__libc_malloc (libc-2.27.so) (57 samples, 1.95%)</title><rect x="72.6899%" y="324" width="1.9507%" height="15" fill="rgb(222,148,37)"/><text x="72.9399%" y="334.50">_..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (vector.tcc:406) (72 samples, 2.46%)</title><rect x="72.2108%" y="244" width="2.4641%" height="15" fill="rgb(234,67,33)"/><text x="72.4608%" y="254.50">st..</text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_allocate (stl_vector.h:172) (72 samples, 2.46%)</title><rect x="72.2108%" y="260" width="2.4641%" height="15" fill="rgb(247,98,35)"/><text x="72.4608%" y="270.50">st..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::allocate (alloc_traits.h:436) (71 samples, 2.43%)</title><rect x="72.2450%" y="276" width="2.4298%" height="15" fill="rgb(247,138,52)"/><text x="72.4950%" y="286.50">st..</text></g><g><title>__gnu_cxx::new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::allocate (new_allocator.h:111) (71 samples, 2.43%)</title><rect x="72.2450%" y="292" width="2.4298%" height="15" fill="rgb(213,79,30)"/><text x="72.4950%" y="302.50">__..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (vector.tcc:426) (30 samples, 1.03%)</title><rect x="75.7016%" y="244" width="1.0267%" height="15" fill="rgb(246,177,23)"/><text x="75.9516%" y="254.50"></text></g><g><title>cfree (libc-2.27.so) (45 samples, 1.54%)</title><rect x="77.4127%" y="260" width="1.5400%" height="15" fill="rgb(230,62,27)"/><text x="77.6627%" y="270.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;&gt; (vector.tcc:453) (52 samples, 1.78%)</title><rect x="77.2758%" y="244" width="1.7796%" height="15" fill="rgb(216,154,8)"/><text x="77.5258%" y="254.50">s..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:561) (277 samples, 9.48%)</title><rect x="69.7125%" y="212" width="9.4798%" height="15" fill="rgb(244,35,45)"/><text x="69.9625%" y="222.50">fastBPE::proce..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (stl_vector.h:948) (234 samples, 8.01%)</title><rect x="71.1841%" y="228" width="8.0082%" height="15" fill="rgb(251,115,12)"/><text x="71.4341%" y="238.50">std::vector..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_assign (basic_string.tcc:274) (110 samples, 3.76%)</title><rect x="81.6222%" y="308" width="3.7645%" height="15" fill="rgb(240,54,50)"/><text x="81.8722%" y="318.50">std:..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_set_length (basic_string.h:217) (110 samples, 3.76%)</title><rect x="81.6222%" y="324" width="3.7645%" height="15" fill="rgb(233,84,52)"/><text x="81.8722%" y="334.50">std:..</text></g><g><title>std::char_traits&lt;char&gt;::assign (char_traits.h:300) (110 samples, 3.76%)</title><rect x="81.6222%" y="340" width="3.7645%" height="15" fill="rgb(207,117,47)"/><text x="81.8722%" y="350.50">std:..</text></g><g><title>std::char_traits&lt;char&gt;::copy (char_traits.h:366) (71 samples, 2.43%)</title><rect x="82.9569%" y="356" width="2.4298%" height="15" fill="rgb(249,43,39)"/><text x="83.2069%" y="366.50">st..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (vector.tcc:218) (173 samples, 5.92%)</title><rect x="79.8768%" y="228" width="5.9206%" height="15" fill="rgb(209,38,44)"/><text x="80.1268%" y="238.50">std::vec..</text></g><g><title>std::copy&lt;__gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (stl_algobase.h:456) (169 samples, 5.78%)</title><rect x="80.0137%" y="244" width="5.7837%" height="15" fill="rgb(236,212,23)"/><text x="80.2637%" y="254.50">std::co..</text></g><g><title>std::__copy_move_a2&lt;false, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt;, __gnu_cxx::__normal_iterator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; &gt; &gt; (stl_algobase.h:422) (169 samples, 5.78%)</title><rect x="80.0137%" y="260" width="5.7837%" height="15" fill="rgb(242,79,21)"/><text x="80.2637%" y="270.50">std::__..</text></g><g><title>std::__copy_move_a&lt;false, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (stl_algobase.h:386) (169 samples, 5.78%)</title><rect x="80.0137%" y="276" width="5.7837%" height="15" fill="rgb(211,96,35)"/><text x="80.2637%" y="286.50">std::__..</text></g><g><title>std::__copy_move&lt;false, false, std::random_access_iterator_tag&gt;::__copy_m&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (stl_algobase.h:326) (153 samples, 5.24%)</title><rect x="80.5613%" y="292" width="5.2361%" height="15" fill="rgb(253,215,40)"/><text x="80.8113%" y="302.50">std::_..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:566) (195 samples, 6.67%)</title><rect x="79.2266%" y="212" width="6.6735%" height="15" fill="rgb(211,81,21)"/><text x="79.4766%" y="222.50">fastBPE::..</text></g><g><title>fastBPE::process_bpe (fastBPE.hpp:577) (90 samples, 3.08%)</title><rect x="86.5161%" y="212" width="3.0801%" height="15" fill="rgb(208,190,38)"/><text x="86.7661%" y="222.50">fas..</text></g><g><title>std::operator+&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (basic_string.h:5991) (56 samples, 1.92%)</title><rect x="87.6797%" y="228" width="1.9165%" height="15" fill="rgb(235,213,38)"/><text x="87.9297%" y="238.50">s..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (basic_string.h:1159) (2,140 samples, 73.24%)</title><rect x="16.9405%" y="180" width="73.2375%" height="15" fill="rgb(237,122,38)"/><text x="17.1905%" y="190.50">std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::operator+= (basic_string.h:1159)</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (basic_string.h:1212) (2,140 samples, 73.24%)</title><rect x="16.9405%" y="196" width="73.2375%" height="15" fill="rgb(244,218,35)"/><text x="17.1905%" y="206.50">std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::append (basic_string.h:1212)</text></g><g><title>fastBPE::BPEApplyer::apply (fastBPE.hpp:674) (2,161 samples, 73.96%)</title><rect x="16.9405%" y="164" width="73.9562%" height="15" fill="rgb(240,68,47)"/><text x="17.1905%" y="174.50">fastBPE::BPEApplyer::apply (fastBPE.hpp:674)</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::operator= (stl_vector.h:466) (2,469 samples, 84.50%)</title><rect x="6.8446%" y="100" width="84.4969%" height="15" fill="rgb(210,16,53)"/><text x="7.0946%" y="110.50">std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, ..</text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_move_assign (stl_vector.h:1537) (2,469 samples, 84.50%)</title><rect x="6.8446%" y="116" width="84.4969%" height="15" fill="rgb(235,124,12)"/><text x="7.0946%" y="126.50">std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, ..</text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_Vector_impl::_M_swap_data (stl_vector.h:107) (2,467 samples, 84.43%)</title><rect x="6.9131%" y="132" width="84.4285%" height="15" fill="rgb(224,169,11)"/><text x="7.1631%" y="142.50">std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;..</text></g><g><title>std::swap&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (move.h:200) (2,467 samples, 84.43%)</title><rect x="6.9131%" y="148" width="84.4285%" height="15" fill="rgb(250,166,2)"/><text x="7.1631%" y="158.50">std::swap&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (move.h:200)</text></g><g><title>apply (fastBPE.pyx:23) (2,472 samples, 84.60%)</title><rect x="6.8104%" y="84" width="84.5996%" height="15" fill="rgb(242,216,29)"/><text x="7.0604%" y="94.50">apply (fastBPE.pyx:23)</text></g><g><title>apply (fastBPE.pyx:24) (79 samples, 2.70%)</title><rect x="91.4100%" y="84" width="2.7036%" height="15" fill="rgb(230,116,27)"/><text x="91.6600%" y="94.50">ap..</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (basic_string.h:647) (48 samples, 1.64%)</title><rect x="92.4709%" y="100" width="1.6427%" height="15" fill="rgb(228,99,48)"/><text x="92.7209%" y="110.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (basic_string.h:220) (48 samples, 1.64%)</title><rect x="92.4709%" y="116" width="1.6427%" height="15" fill="rgb(253,11,6)"/><text x="92.7209%" y="126.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (basic_string.h:211) (48 samples, 1.64%)</title><rect x="92.4709%" y="132" width="1.6427%" height="15" fill="rgb(247,143,39)"/><text x="92.7209%" y="142.50"></text></g><g><title>apply (test_cpp.py:11) (2,721 samples, 93.12%)</title><rect x="1.7796%" y="68" width="93.1211%" height="15" fill="rgb(236,97,10)"/><text x="2.0296%" y="78.50">apply (test_cpp.py:11)</text></g><g><title>apply (test_cpp.py:12) (126 samples, 4.31%)</title><rect x="94.9008%" y="68" width="4.3121%" height="15" fill="rgb(233,208,19)"/><text x="95.1508%" y="78.50">apply..</text></g><g><title>all (2,922 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(216,164,2)"/><text x="0.2500%" y="46.50"></text></g><g><title>&lt;module&gt; (test_cpp.py:20) (2,922 samples, 100.00%)</title><rect x="0.0000%" y="52" width="100.0000%" height="15" fill="rgb(220,129,5)"/><text x="0.2500%" y="62.50">&lt;module&gt; (test_cpp.py:20)</text></g></svg></svg>