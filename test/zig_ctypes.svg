<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = true;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script>
<rect x="0" y="0" width="100%" height="240px" fill="url(#background)"/>
<text id="title" x="50.0000%" y="24.00">py-spy</text>
<text id="details" x="10" y="709.00"> </text>
<text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text>
<text id="search" x="1090" y="24.00">Search</text>
<text id="matched" x="1090" y="709.00"> </text>
<svg id="frames" x="10" width="1180">
    <g><title>&lt;module&gt; (test_zig.py:4) (21 samples, 3.76%)</title><rect x="0.0000%" y="52" width="3.7634%" height="15" fill="rgb(241,131,45)"/><text x="0.2500%" y="62.50">&lt;mod..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).internalPut (hash_map.zig:334) (6 samples, 1.08%)</title><rect x="4.6595%" y="84" width="1.0753%" height="15" fill="rgb(235,93,37)"/><text x="4.9095%" y="94.50"></text></g>
    <g><title>0x7fb4f269ef2d (libc-2.27.so) (6 samples, 1.08%)</title><rect x="4.6595%" y="100" width="1.0753%" height="15" fill="rgb(213,116,39)"/><text x="4.9095%" y="110.50"></text></g>
    <g><title>apply (test_zig.py:51) (17 samples, 3.05%)</title><rect x="3.7634%" y="68" width="3.0466%" height="15" fill="rgb(222,207,29)"/><text x="4.0134%" y="78.50">app..</text></g>
    <g><title>apply (test_zig.py:53) (10 samples, 1.79%)</title><rect x="6.8100%" y="68" width="1.7921%" height="15" fill="rgb(206,96,30)"/><text x="7.0600%" y="78.50">a..</text></g>
    <g><title>BPEApplyer.applyWord (applyBPE.zig:203) (9 samples, 1.61%)</title><rect x="13.9785%" y="100" width="1.6129%" height="15" fill="rgb(218,138,4)"/><text x="14.2285%" y="110.50"></text></g>
    <g><title>BPEApplyer.applyWord (applyBPE.zig:214) (6 samples, 1.08%)</title><rect x="16.1290%" y="100" width="1.0753%" height="15" fill="rgb(250,191,14)"/><text x="16.3790%" y="110.50"></text></g>
    <g><title>BPEApplyer.applyWord (applyBPE.zig:240) (8 samples, 1.43%)</title><rect x="18.4588%" y="100" width="1.4337%" height="15" fill="rgb(239,60,40)"/><text x="18.7088%" y="110.50"></text></g>
    <g><title>std.mem.copy (mem.zig:268) (53 samples, 9.50%)</title><rect x="21.5054%" y="132" width="9.4982%" height="15" fill="rgb(206,27,48)"/><text x="21.7554%" y="142.50">std.mem.copy (..</text></g>
    <g><title>BPEApplyer.applyWord (applyBPE.zig:246) (64 samples, 11.47%)</title><rect x="20.2509%" y="100" width="11.4695%" height="15" fill="rgb(225,35,8)"/><text x="20.5009%" y="110.50">BPEApplyer.applyW..</text></g>
    <g><title>appendSliceAssumeCapacity (applyBPE.zig:272) (62 samples, 11.11%)</title><rect x="20.6093%" y="116" width="11.1111%" height="15" fill="rgb(250,213,24)"/><text x="20.8593%" y="126.50">appendSliceAssum..</text></g>
    <g><title>PyCSimpleType_from_param (_ctypes.c:2138) (7 samples, 1.25%)</title><rect x="32.9749%" y="132" width="1.2545%" height="15" fill="rgb(247,123,22)"/><text x="33.2249%" y="142.50"></text></g>
    <g><title>_ctypes_callproc (callproc.c:1126) (16 samples, 2.87%)</title><rect x="32.2581%" y="116" width="2.8674%" height="15" fill="rgb(231,138,38)"/><text x="32.5081%" y="126.50">_c..</text></g>
    <g><title>_ctypes_callproc (callproc.c:1184) (10 samples, 1.79%)</title><rect x="35.4839%" y="116" width="1.7921%" height="15" fill="rgb(231,145,46)"/><text x="35.7339%" y="126.50">_..</text></g>
    <g><title>PyCFuncPtr_call (_ctypes.c:3980) (34 samples, 6.09%)</title><rect x="32.2581%" y="100" width="6.0932%" height="15" fill="rgb(251,118,11)"/><text x="32.5081%" y="110.50">PyCFuncP..</text></g>
    <g><title>ctypes_bpe (applyBPE.zig:63) (17 samples, 3.05%)</title><rect x="38.3513%" y="100" width="3.0466%" height="15" fill="rgb(217,147,25)"/><text x="38.6013%" y="110.50">cty..</text></g>
    <g><title>std.debug.warn (debug.zig:65) (17 samples, 3.05%)</title><rect x="38.3513%" y="116" width="3.0466%" height="15" fill="rgb(247,81,37)"/><text x="38.6013%" y="126.50">std..</text></g>
    <g><title>std.io.out_stream.OutStream(std.fs.file.File,std.os.WriteError,std.fs.file.File.write).print (out_stream.zig:28) (17 samples, 3.05%)</title><rect x="38.3513%" y="132" width="3.0466%" height="15" fill="rgb(209,12,38)"/><text x="38.6013%" y="142.50">std..</text></g>
    <g><title>std.fmt.format (fmt.zig:139) (17 samples, 3.05%)</title><rect x="38.3513%" y="148" width="3.0466%" height="15" fill="rgb(227,1,9)"/><text x="38.6013%" y="158.50">std..</text></g>
    <g><title>std.io.out_stream.OutStream(std.fs.file.File,std.os.WriteError,std.fs.file.File.write).writeAll (out_stream.zig:23) (17 samples, 3.05%)</title><rect x="38.3513%" y="164" width="3.0466%" height="15" fill="rgb(248,47,43)"/><text x="38.6013%" y="174.50">std..</text></g>
    <g><title>std.io.out_stream.OutStream(std.fs.file.File,std.os.WriteError,std.fs.file.File.write).write (out_stream.zig:17) (17 samples, 3.05%)</title><rect x="38.3513%" y="180" width="3.0466%" height="15" fill="rgb(221,10,30)"/><text x="38.6013%" y="190.50">std..</text></g>
    <g><title>std.fs.file.File.write (file.zig:412) (17 samples, 3.05%)</title><rect x="38.3513%" y="196" width="3.0466%" height="15" fill="rgb(210,229,1)"/><text x="38.6013%" y="206.50">std..</text></g>
    <g><title>std.os.write (os.zig:608) (16 samples, 2.87%)</title><rect x="38.5305%" y="212" width="2.8674%" height="15" fill="rgb(222,148,37)"/><text x="38.7805%" y="222.50">st..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).ensureCapacityExact (hash_map.zig) (11 samples, 1.97%)</title><rect x="41.3978%" y="100" width="1.9713%" height="15" fill="rgb(234,67,33)"/><text x="41.6478%" y="110.50">s..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).initCapacity (hash_map.zig:309) (70 samples, 12.54%)</title><rect x="43.3692%" y="116" width="12.5448%" height="15" fill="rgb(247,98,35)"/><text x="43.6192%" y="126.50">std.hash_map.HashMa..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).ensureCapacityExact (hash_map.zig:189) (83 samples, 14.87%)</title><rect x="43.3692%" y="100" width="14.8746%" height="15" fill="rgb(247,138,52)"/><text x="43.6192%" y="110.50">std.hash_map.HashMap(Wo..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).initCapacity (hash_map.zig:310) (13 samples, 2.33%)</title><rect x="55.9140%" y="116" width="2.3297%" height="15" fill="rgb(213,79,30)"/><text x="56.1640%" y="126.50">s..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).ensureCapacityExact (hash_map.zig:195) (39 samples, 6.99%)</title><rect x="58.7814%" y="100" width="6.9892%" height="15" fill="rgb(246,177,23)"/><text x="59.0314%" y="110.50">std.hash_..</text></g>
    <g><title>std.hash_map.HashMap(WordPair,u32,WordPair.hash,WordPair.eql).ensureCapacityExact (hash_map.zig:198) (21 samples, 3.76%)</title><rect x="65.7706%" y="100" width="3.7634%" height="15" fill="rgb(230,62,27)"/><text x="66.0206%" y="110.50">std...</text></g>
    <g><title>std.mem.Allocator.free (mem.zig:254) (18 samples, 3.23%)</title><rect x="66.3082%" y="116" width="3.2258%" height="15" fill="rgb(216,154,8)"/><text x="66.5582%" y="126.50">std..</text></g>
    <g><title>std.hash.wyhash.WyhashStateless.final (wyhash.zig) (6 samples, 1.08%)</title><rect x="69.5341%" y="148" width="1.0753%" height="15" fill="rgb(244,35,45)"/><text x="69.7841%" y="158.50"></text></g>
    <g><title>std.hash.wyhash.WyhashStateless.final (wyhash.zig:101) (17 samples, 3.05%)</title><rect x="71.3262%" y="148" width="3.0466%" height="15" fill="rgb(251,115,12)"/><text x="71.5762%" y="158.50">std..</text></g>
    <g><title>std.hash.wyhash.read_8bytes_swapped (wyhash.zig:18) (7 samples, 1.25%)</title><rect x="73.1183%" y="164" width="1.2545%" height="15" fill="rgb(240,54,50)"/><text x="73.3683%" y="174.50"></text></g>
    <g><title>std.hash.wyhash.WyhashStateless.final (wyhash.zig:104) (7 samples, 1.25%)</title><rect x="74.3728%" y="148" width="1.2545%" height="15" fill="rgb(233,84,52)"/><text x="74.6228%" y="158.50"></text></g>
    <g><title>std.hash.wyhash.mix0 (wyhash.zig) (8 samples, 1.43%)</title><rect x="76.3441%" y="164" width="1.4337%" height="15" fill="rgb(207,117,47)"/><text x="76.5941%" y="174.50"></text></g>
    <g><title>std.hash_map.hashString (hash_map.zig:30) (60 samples, 10.75%)</title><rect x="69.5341%" y="100" width="10.7527%" height="15" fill="rgb(249,43,39)"/><text x="69.7841%" y="110.50">std.hash_map.has..</text></g>
    <g><title>std.hash.wyhash.Wyhash.hash (wyhash.zig:172) (60 samples, 10.75%)</title><rect x="69.5341%" y="116" width="10.7527%" height="15" fill="rgb(209,38,44)"/><text x="69.7841%" y="126.50">std.hash.wyhash...</text></g>
    <g><title>std.hash.wyhash.WyhashStateless.hash (wyhash.zig:125) (60 samples, 10.75%)</title><rect x="69.5341%" y="132" width="10.7527%" height="15" fill="rgb(236,212,23)"/><text x="69.7841%" y="142.50">std.hash.wyhash...</text></g>
    <g><title>std.hash.wyhash.WyhashStateless.final (wyhash.zig:99) (22 samples, 3.94%)</title><rect x="76.3441%" y="148" width="3.9427%" height="15" fill="rgb(242,79,21)"/><text x="76.5941%" y="158.50">std...</text></g>
    <g><title>std.hash.wyhash.mix0 (wyhash.zig:28) (14 samples, 2.51%)</title><rect x="77.7778%" y="164" width="2.5090%" height="15" fill="rgb(211,96,35)"/><text x="78.0278%" y="174.50">st..</text></g>
    <g><title>std.hash.wyhash.mum (wyhash.zig:22) (10 samples, 1.79%)</title><rect x="78.4946%" y="180" width="1.7921%" height="15" fill="rgb(253,215,40)"/><text x="78.7446%" y="190.50">s..</text></g>
    <g><title>std.math.mulWide (math.zig:968) (10 samples, 1.79%)</title><rect x="78.4946%" y="196" width="1.7921%" height="15" fill="rgb(211,81,21)"/><text x="78.7446%" y="206.50">s..</text></g>
    <g><title>bpe_sent (test_zig.py:34) (403 samples, 72.22%)</title><rect x="10.2151%" y="84" width="72.2222%" height="15" fill="rgb(208,190,38)"/><text x="10.4651%" y="94.50">bpe_sent (test_zig.py:34)</text></g>
    <g><title>std.io.in_stream.InStream(*std.io.buffered_in_stream.BufferedInStream(4096,std.io.in_stream.InStream(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)),std.os.ReadError,std.io.buffered_in_stream.BufferedInStream(4096,std.io.in_stream.InStream(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)).read).readByte (in_stream.zig:177) (12 samples, 2.15%)</title><rect x="80.2867%" y="100" width="2.1505%" height="15" fill="rgb(235,213,38)"/><text x="80.5367%" y="110.50">s..</text></g>
    <g><title>std.io.in_stream.InStream(*std.io.buffered_in_stream.BufferedInStream(4096,std.io.in_stream.InStream(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)),std.os.ReadError,std.io.buffered_in_stream.BufferedInStream(4096,std.io.in_stream.InStream(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)).read).read (in_stream.zig:27) (12 samples, 2.15%)</title><rect x="80.2867%" y="116" width="2.1505%" height="15" fill="rgb(237,122,38)"/><text x="80.5367%" y="126.50">s..</text></g>
    <g><title>std.io.buffered_in_stream.BufferedInStream(4096,std.io.in_stream.InStream(std.fs.file.File,std.os.ReadError,std.fs.file.File.read)).read (buffered_in_stream.zig:20) (12 samples, 2.15%)</title><rect x="80.2867%" y="132" width="2.1505%" height="15" fill="rgb(244,218,35)"/><text x="80.5367%" y="142.50">s..</text></g>
    <g><title>std.fifo.LinearFifo(u8,std.fifo.LinearFifoBufferType { .Static = 4096}).read (fifo.zig:210) (12 samples, 2.15%)</title><rect x="80.2867%" y="148" width="2.1505%" height="15" fill="rgb(240,68,47)"/><text x="80.5367%" y="158.50">s..</text></g>
    <g><title>std.mem.copy (mem.zig:269) (7 samples, 1.25%)</title><rect x="81.1828%" y="164" width="1.2545%" height="15" fill="rgb(210,16,53)"/><text x="81.4328%" y="174.50"></text></g>
    <g><title>CharArray_get_value (_ctypes.c:1208) (17 samples, 3.05%)</title><rect x="86.0215%" y="100" width="3.0466%" height="15" fill="rgb(235,124,12)"/><text x="86.2715%" y="110.50">Cha..</text></g>
    <g><title>CharArray_get_value (_ctypes.c:1209) (35 samples, 6.27%)</title><rect x="89.0681%" y="100" width="6.2724%" height="15" fill="rgb(224,169,11)"/><text x="89.3181%" y="110.50">CharArra..</text></g>
    <g><title>apply (test_zig.py:56) (489 samples, 87.63%)</title><rect x="8.6022%" y="68" width="87.6344%" height="15" fill="rgb(250,166,2)"/><text x="8.8522%" y="78.50">apply (test_zig.py:56)</text></g>
    <g><title>bpe_sent (test_zig.py:35) (77 samples, 13.80%)</title><rect x="82.4373%" y="84" width="13.7993%" height="15" fill="rgb(242,216,29)"/><text x="82.6873%" y="94.50">bpe_sent (test_zig.py..</text></g>
    <g><title>apply (test_zig.py:57) (14 samples, 2.51%)</title><rect x="96.2366%" y="68" width="2.5090%" height="15" fill="rgb(230,116,27)"/><text x="96.4866%" y="78.50">ap..</text></g>
    <g><title>all (558 samples, 100%)</title><rect x="0.0000%" y="36" width="100.0000%" height="15" fill="rgb(228,99,48)"/><text x="0.2500%" y="46.50"></text></g>
    <g><title>&lt;module&gt; (test_zig.py:66) (537 samples, 96.24%)</title><rect x="3.7634%" y="52" width="96.2366%" height="15" fill="rgb(253,11,6)"/><text x="4.0134%" y="62.50">&lt;module&gt; (test_zig.py:66)</text></g>
    <g><title>apply (test_zig.py:58) (7 samples, 1.25%)</title><rect x="98.7455%" y="68" width="1.2545%" height="15" fill="rgb(247,143,39)"/><text x="98.9955%" y="78.50"></text></g>
</svg>
</svg>
